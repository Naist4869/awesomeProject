// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CategoryGoodsGetReq struct {
	ParentId             int64    `protobuf:"varint,1,opt,name=parentId,proto3" json:"parentId" form:"parentId" binding:"required"`
	Grade                int64    `protobuf:"varint,2,opt,name=grade,proto3" json:"grade" form:"grade" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CategoryGoodsGetReq) Reset()         { *m = CategoryGoodsGetReq{} }
func (m *CategoryGoodsGetReq) String() string { return proto.CompactTextString(m) }
func (*CategoryGoodsGetReq) ProtoMessage()    {}
func (*CategoryGoodsGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *CategoryGoodsGetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CategoryGoodsGetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CategoryGoodsGetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CategoryGoodsGetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CategoryGoodsGetReq.Merge(m, src)
}
func (m *CategoryGoodsGetReq) XXX_Size() int {
	return m.Size()
}
func (m *CategoryGoodsGetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CategoryGoodsGetReq.DiscardUnknown(m)
}

var xxx_messageInfo_CategoryGoodsGetReq proto.InternalMessageInfo

type CategoryGoodsResp struct {
	Grade                int64    `protobuf:"varint,1,opt,name=grade,proto3" json:"grade"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Id                   int64    `protobuf:"varint,3,opt,name=id,proto3" json:"id"`
	ParentId             int64    `protobuf:"varint,4,opt,name=parentId,proto3" json:"parentId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CategoryGoodsResp) Reset()         { *m = CategoryGoodsResp{} }
func (m *CategoryGoodsResp) String() string { return proto.CompactTextString(m) }
func (*CategoryGoodsResp) ProtoMessage()    {}
func (*CategoryGoodsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *CategoryGoodsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CategoryGoodsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CategoryGoodsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CategoryGoodsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CategoryGoodsResp.Merge(m, src)
}
func (m *CategoryGoodsResp) XXX_Size() int {
	return m.Size()
}
func (m *CategoryGoodsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CategoryGoodsResp.DiscardUnknown(m)
}

var xxx_messageInfo_CategoryGoodsResp proto.InternalMessageInfo

type GoodsJingFenQueryReq struct {
	EliteId              int32    `protobuf:"varint,1,opt,name=eliteId,proto3" json:"eliteId"`
	PageIndex            int32    `protobuf:"varint,2,opt,name=pageIndex,proto3" json:"pageIndex,omitempty"`
	PageSize             int32    `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	SortName             string   `protobuf:"bytes,4,opt,name=sortName,proto3" json:"sortName,omitempty"`
	Sort                 string   `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Pid                  string   `protobuf:"bytes,6,opt,name=pid,proto3" json:"pid,omitempty"`
	Fields               string   `protobuf:"bytes,7,opt,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoodsJingFenQueryReq) Reset()         { *m = GoodsJingFenQueryReq{} }
func (m *GoodsJingFenQueryReq) String() string { return proto.CompactTextString(m) }
func (*GoodsJingFenQueryReq) ProtoMessage()    {}
func (*GoodsJingFenQueryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *GoodsJingFenQueryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsJingFenQueryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsJingFenQueryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsJingFenQueryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsJingFenQueryReq.Merge(m, src)
}
func (m *GoodsJingFenQueryReq) XXX_Size() int {
	return m.Size()
}
func (m *GoodsJingFenQueryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsJingFenQueryReq.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsJingFenQueryReq proto.InternalMessageInfo

type GoodsJingFenResp struct {
	CategoryInfo         *GoodsJingFenResp_CategoryInfo   `protobuf:"bytes,1,opt,name=categoryInfo,proto3" json:"categoryInfo"`
	Comments             int32                            `protobuf:"varint,2,opt,name=comments,proto3" json:"comments"`
	CommissionInfo       *GoodsJingFenResp_CommissionInfo `protobuf:"bytes,3,opt,name=commissionInfo,proto3" json:"commissionInfo"`
	CouponInfo           *GoodsJingFenResp_CouponInfo     `protobuf:"bytes,4,opt,name=couponInfo,proto3" json:"couponInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *GoodsJingFenResp) Reset()         { *m = GoodsJingFenResp{} }
func (m *GoodsJingFenResp) String() string { return proto.CompactTextString(m) }
func (*GoodsJingFenResp) ProtoMessage()    {}
func (*GoodsJingFenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *GoodsJingFenResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsJingFenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsJingFenResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsJingFenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsJingFenResp.Merge(m, src)
}
func (m *GoodsJingFenResp) XXX_Size() int {
	return m.Size()
}
func (m *GoodsJingFenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsJingFenResp.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsJingFenResp proto.InternalMessageInfo

type GoodsJingFenResp_CategoryInfo struct {
	Cid1                 int32    `protobuf:"varint,1,opt,name=Cid1,proto3" json:"cid1"`
	Cid1Name             string   `protobuf:"bytes,2,opt,name=Cid1Name,proto3" json:"cid1Name"`
	Cid2                 int32    `protobuf:"varint,3,opt,name=Cid2,proto3" json:"cid2"`
	Cid2Name             string   `protobuf:"bytes,4,opt,name=Cid2Name,proto3" json:"cid2Name"`
	Cid3                 int32    `protobuf:"varint,5,opt,name=Cid3,proto3" json:"cid3"`
	Cid3Name             string   `protobuf:"bytes,6,opt,name=Cid3Name,proto3" json:"cid3Name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoodsJingFenResp_CategoryInfo) Reset()         { *m = GoodsJingFenResp_CategoryInfo{} }
func (m *GoodsJingFenResp_CategoryInfo) String() string { return proto.CompactTextString(m) }
func (*GoodsJingFenResp_CategoryInfo) ProtoMessage()    {}
func (*GoodsJingFenResp_CategoryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3, 0}
}
func (m *GoodsJingFenResp_CategoryInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsJingFenResp_CategoryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsJingFenResp_CategoryInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsJingFenResp_CategoryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsJingFenResp_CategoryInfo.Merge(m, src)
}
func (m *GoodsJingFenResp_CategoryInfo) XXX_Size() int {
	return m.Size()
}
func (m *GoodsJingFenResp_CategoryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsJingFenResp_CategoryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsJingFenResp_CategoryInfo proto.InternalMessageInfo

type GoodsJingFenResp_CommissionInfo struct {
	Commission           float32  `protobuf:"fixed32,1,opt,name=commission,proto3" json:"commission"`
	CommissionShare      float32  `protobuf:"fixed32,2,opt,name=commissionShare,proto3" json:"commissionShare"`
	CouponCommission     float32  `protobuf:"fixed32,3,opt,name=couponCommission,proto3" json:"couponCommission,omitempty"`
	PlusCommissionShare  float32  `protobuf:"fixed32,4,opt,name=plusCommissionShare,proto3" json:"plusCommissionShare,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoodsJingFenResp_CommissionInfo) Reset()         { *m = GoodsJingFenResp_CommissionInfo{} }
func (m *GoodsJingFenResp_CommissionInfo) String() string { return proto.CompactTextString(m) }
func (*GoodsJingFenResp_CommissionInfo) ProtoMessage()    {}
func (*GoodsJingFenResp_CommissionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3, 1}
}
func (m *GoodsJingFenResp_CommissionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsJingFenResp_CommissionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsJingFenResp_CommissionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsJingFenResp_CommissionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsJingFenResp_CommissionInfo.Merge(m, src)
}
func (m *GoodsJingFenResp_CommissionInfo) XXX_Size() int {
	return m.Size()
}
func (m *GoodsJingFenResp_CommissionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsJingFenResp_CommissionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsJingFenResp_CommissionInfo proto.InternalMessageInfo

type GoodsJingFenResp_CouponInfo struct {
	CouponList           []*CouponList `protobuf:"bytes,1,rep,name=couponList,proto3" json:"couponList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GoodsJingFenResp_CouponInfo) Reset()         { *m = GoodsJingFenResp_CouponInfo{} }
func (m *GoodsJingFenResp_CouponInfo) String() string { return proto.CompactTextString(m) }
func (*GoodsJingFenResp_CouponInfo) ProtoMessage()    {}
func (*GoodsJingFenResp_CouponInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3, 2}
}
func (m *GoodsJingFenResp_CouponInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsJingFenResp_CouponInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsJingFenResp_CouponInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsJingFenResp_CouponInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsJingFenResp_CouponInfo.Merge(m, src)
}
func (m *GoodsJingFenResp_CouponInfo) XXX_Size() int {
	return m.Size()
}
func (m *GoodsJingFenResp_CouponInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsJingFenResp_CouponInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsJingFenResp_CouponInfo proto.InternalMessageInfo

type CouponList struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CouponList) Reset()         { *m = CouponList{} }
func (m *CouponList) String() string { return proto.CompactTextString(m) }
func (*CouponList) ProtoMessage()    {}
func (*CouponList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *CouponList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CouponList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CouponList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CouponList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CouponList.Merge(m, src)
}
func (m *CouponList) XXX_Size() int {
	return m.Size()
}
func (m *CouponList) XXX_DiscardUnknown() {
	xxx_messageInfo_CouponList.DiscardUnknown(m)
}

var xxx_messageInfo_CouponList proto.InternalMessageInfo

type CategoryGoodsRespList struct {
	Data                 []*CategoryGoodsResp `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CategoryGoodsRespList) Reset()         { *m = CategoryGoodsRespList{} }
func (m *CategoryGoodsRespList) String() string { return proto.CompactTextString(m) }
func (*CategoryGoodsRespList) ProtoMessage()    {}
func (*CategoryGoodsRespList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *CategoryGoodsRespList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CategoryGoodsRespList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CategoryGoodsRespList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CategoryGoodsRespList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CategoryGoodsRespList.Merge(m, src)
}
func (m *CategoryGoodsRespList) XXX_Size() int {
	return m.Size()
}
func (m *CategoryGoodsRespList) XXX_DiscardUnknown() {
	xxx_messageInfo_CategoryGoodsRespList.DiscardUnknown(m)
}

var xxx_messageInfo_CategoryGoodsRespList proto.InternalMessageInfo

type MediaIDReq struct {
	FakeID               string   `protobuf:"bytes,1,opt,name=fakeID,proto3" json:"fakeID,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaIDReq) Reset()         { *m = MediaIDReq{} }
func (m *MediaIDReq) String() string { return proto.CompactTextString(m) }
func (*MediaIDReq) ProtoMessage()    {}
func (*MediaIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *MediaIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaIDReq.Merge(m, src)
}
func (m *MediaIDReq) XXX_Size() int {
	return m.Size()
}
func (m *MediaIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_MediaIDReq proto.InternalMessageInfo

type MediaIDResp struct {
	MediaID              string   `protobuf:"bytes,1,opt,name=MediaID,proto3" json:"MediaID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaIDResp) Reset()         { *m = MediaIDResp{} }
func (m *MediaIDResp) String() string { return proto.CompactTextString(m) }
func (*MediaIDResp) ProtoMessage()    {}
func (*MediaIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *MediaIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaIDResp.Merge(m, src)
}
func (m *MediaIDResp) XXX_Size() int {
	return m.Size()
}
func (m *MediaIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_MediaIDResp proto.InternalMessageInfo

type KeyConvertKeyReq struct {
	FromKey              string   `protobuf:"bytes,1,opt,name=FromKey,proto3" json:"FromKey,omitempty"`
	UserID               string   `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyConvertKeyReq) Reset()         { *m = KeyConvertKeyReq{} }
func (m *KeyConvertKeyReq) String() string { return proto.CompactTextString(m) }
func (*KeyConvertKeyReq) ProtoMessage()    {}
func (*KeyConvertKeyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *KeyConvertKeyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyConvertKeyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyConvertKeyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyConvertKeyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyConvertKeyReq.Merge(m, src)
}
func (m *KeyConvertKeyReq) XXX_Size() int {
	return m.Size()
}
func (m *KeyConvertKeyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyConvertKeyReq.DiscardUnknown(m)
}

var xxx_messageInfo_KeyConvertKeyReq proto.InternalMessageInfo

type KeyConvertKeyResp struct {
	ToKey                string   `protobuf:"bytes,1,opt,name=ToKey,proto3" json:"ToKey,omitempty"`
	Price                string   `protobuf:"bytes,2,opt,name=Price,proto3" json:"Price,omitempty"`
	Rebate               string   `protobuf:"bytes,3,opt,name=Rebate,proto3" json:"Rebate,omitempty"`
	Title                string   `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	PicURL               string   `protobuf:"bytes,5,opt,name=PicURL,proto3" json:"PicURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyConvertKeyResp) Reset()         { *m = KeyConvertKeyResp{} }
func (m *KeyConvertKeyResp) String() string { return proto.CompactTextString(m) }
func (*KeyConvertKeyResp) ProtoMessage()    {}
func (*KeyConvertKeyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *KeyConvertKeyResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyConvertKeyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyConvertKeyResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyConvertKeyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyConvertKeyResp.Merge(m, src)
}
func (m *KeyConvertKeyResp) XXX_Size() int {
	return m.Size()
}
func (m *KeyConvertKeyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyConvertKeyResp.DiscardUnknown(m)
}

var xxx_messageInfo_KeyConvertKeyResp proto.InternalMessageInfo

type TitleConvertTBKeyReq struct {
	Title                string   `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TitleConvertTBKeyReq) Reset()         { *m = TitleConvertTBKeyReq{} }
func (m *TitleConvertTBKeyReq) String() string { return proto.CompactTextString(m) }
func (*TitleConvertTBKeyReq) ProtoMessage()    {}
func (*TitleConvertTBKeyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *TitleConvertTBKeyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TitleConvertTBKeyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TitleConvertTBKeyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TitleConvertTBKeyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TitleConvertTBKeyReq.Merge(m, src)
}
func (m *TitleConvertTBKeyReq) XXX_Size() int {
	return m.Size()
}
func (m *TitleConvertTBKeyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TitleConvertTBKeyReq.DiscardUnknown(m)
}

var xxx_messageInfo_TitleConvertTBKeyReq proto.InternalMessageInfo

type TitleConvertTBKeyResp struct {
	TBKey                string   `protobuf:"bytes,1,opt,name=TBKey,proto3" json:"TBKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TitleConvertTBKeyResp) Reset()         { *m = TitleConvertTBKeyResp{} }
func (m *TitleConvertTBKeyResp) String() string { return proto.CompactTextString(m) }
func (*TitleConvertTBKeyResp) ProtoMessage()    {}
func (*TitleConvertTBKeyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *TitleConvertTBKeyResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TitleConvertTBKeyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TitleConvertTBKeyResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TitleConvertTBKeyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TitleConvertTBKeyResp.Merge(m, src)
}
func (m *TitleConvertTBKeyResp) XXX_Size() int {
	return m.Size()
}
func (m *TitleConvertTBKeyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TitleConvertTBKeyResp.DiscardUnknown(m)
}

var xxx_messageInfo_TitleConvertTBKeyResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CategoryGoodsGetReq)(nil), "demo.service.v1.CategoryGoodsGetReq")
	proto.RegisterType((*CategoryGoodsResp)(nil), "demo.service.v1.CategoryGoodsResp")
	proto.RegisterType((*GoodsJingFenQueryReq)(nil), "demo.service.v1.goodsJingFenQueryReq")
	proto.RegisterType((*GoodsJingFenResp)(nil), "demo.service.v1.goodsJingFenResp")
	proto.RegisterType((*GoodsJingFenResp_CategoryInfo)(nil), "demo.service.v1.goodsJingFenResp.CategoryInfo")
	proto.RegisterType((*GoodsJingFenResp_CommissionInfo)(nil), "demo.service.v1.goodsJingFenResp.CommissionInfo")
	proto.RegisterType((*GoodsJingFenResp_CouponInfo)(nil), "demo.service.v1.goodsJingFenResp.CouponInfo")
	proto.RegisterType((*CouponList)(nil), "demo.service.v1.CouponList")
	proto.RegisterType((*CategoryGoodsRespList)(nil), "demo.service.v1.CategoryGoodsRespList")
	proto.RegisterType((*MediaIDReq)(nil), "demo.service.v1.MediaIDReq")
	proto.RegisterType((*MediaIDResp)(nil), "demo.service.v1.MediaIDResp")
	proto.RegisterType((*KeyConvertKeyReq)(nil), "demo.service.v1.KeyConvertKeyReq")
	proto.RegisterType((*KeyConvertKeyResp)(nil), "demo.service.v1.KeyConvertKeyResp")
	proto.RegisterType((*TitleConvertTBKeyReq)(nil), "demo.service.v1.TitleConvertTBKeyReq")
	proto.RegisterType((*TitleConvertTBKeyResp)(nil), "demo.service.v1.TitleConvertTBKeyResp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1113 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xbf, 0x73, 0xdc, 0x44,
	0x14, 0xb6, 0xee, 0x97, 0x73, 0xcf, 0x8e, 0x63, 0xaf, 0x1d, 0x73, 0x73, 0x71, 0x4e, 0x8e, 0x98,
	0x04, 0x17, 0x8e, 0x8c, 0x75, 0x03, 0x45, 0x18, 0x1a, 0x9d, 0xb1, 0xe7, 0x62, 0x63, 0xcc, 0xda,
	0xa1, 0xa0, 0xd3, 0x9d, 0xd6, 0xca, 0x0e, 0x27, 0xad, 0x22, 0xe9, 0x3c, 0x1c, 0x3d, 0x25, 0x1d,
	0x05, 0x25, 0x2d, 0x7f, 0x00, 0xff, 0x43, 0xca, 0x74, 0x74, 0x1a, 0x62, 0x66, 0x28, 0x54, 0xa6,
	0xa3, 0x63, 0x76, 0xb5, 0xfa, 0x71, 0x77, 0xce, 0xe0, 0xa1, 0xb1, 0xf7, 0x7b, 0xef, 0x7b, 0xdf,
	0xbe, 0x7d, 0xef, 0xed, 0x9e, 0xa0, 0x69, 0xf9, 0x54, 0xf7, 0x03, 0x16, 0x31, 0x74, 0xcf, 0x26,
	0x2e, 0xd3, 0x43, 0x12, 0x5c, 0xd1, 0x21, 0xd1, 0xaf, 0xf6, 0xdb, 0x4f, 0x1d, 0x1a, 0xbd, 0x1c,
	0x0f, 0xf4, 0x21, 0x73, 0xf7, 0x1c, 0xe6, 0xb0, 0x3d, 0xc1, 0x1b, 0x8c, 0x2f, 0x05, 0x12, 0x40,
	0xac, 0xd2, 0xf8, 0xf6, 0x03, 0x87, 0x31, 0x67, 0x44, 0x0a, 0x16, 0x71, 0xfd, 0x68, 0x22, 0x9d,
	0x5b, 0xd2, 0x69, 0xf9, 0x74, 0xcf, 0xf2, 0x3c, 0x16, 0x59, 0x11, 0x65, 0x5e, 0x98, 0x7a, 0xb5,
	0xdf, 0x14, 0x58, 0xef, 0x59, 0x11, 0x71, 0x58, 0x30, 0x39, 0x62, 0xcc, 0x0e, 0x8f, 0x48, 0x84,
	0xc9, 0x2b, 0x74, 0x0a, 0x77, 0x7c, 0x2b, 0x20, 0x5e, 0xd4, 0xb7, 0x5b, 0xca, 0xb6, 0xb2, 0x53,
	0x35, 0x8d, 0x24, 0x56, 0x73, 0xdb, 0xbb, 0x58, 0xd5, 0x2e, 0x59, 0xe0, 0x3e, 0xd3, 0x32, 0x8b,
	0xb6, 0x3d, 0xa0, 0x9e, 0x4d, 0x3d, 0xe7, 0x99, 0x16, 0x90, 0x57, 0x63, 0x1a, 0x10, 0x5b, 0xc3,
	0x39, 0x1f, 0x99, 0x50, 0x77, 0x02, 0xcb, 0x26, 0xad, 0x8a, 0x10, 0xdb, 0x4d, 0x62, 0x35, 0x35,
	0xbc, 0x8b, 0x55, 0x35, 0x55, 0x12, 0xf0, 0x46, 0x99, 0x94, 0xa9, 0xfd, 0xac, 0xc0, 0xda, 0x54,
	0xae, 0x98, 0x84, 0x3e, 0x52, 0x33, 0xe5, 0x34, 0xcd, 0x66, 0xae, 0x2c, 0xc3, 0xd0, 0x16, 0xd4,
	0x3c, 0xcb, 0x4d, 0x77, 0x6e, 0x9a, 0x77, 0x92, 0x58, 0x15, 0x18, 0x8b, 0xbf, 0x68, 0x13, 0x2a,
	0xd4, 0x6e, 0x55, 0x45, 0x6c, 0x23, 0x89, 0xd5, 0x0a, 0xb5, 0x71, 0x85, 0xda, 0x68, 0xa7, 0x54,
	0x80, 0x9a, 0xf0, 0x2e, 0x97, 0x0b, 0x50, 0x1c, 0x4d, 0xfb, 0xa3, 0x02, 0x1b, 0x0e, 0x4f, 0xe7,
	0x39, 0xf5, 0x9c, 0x43, 0xe2, 0x7d, 0x3d, 0x26, 0xc1, 0x84, 0xd7, 0xf0, 0x31, 0x2c, 0x92, 0x11,
	0x8d, 0x88, 0x2c, 0x61, 0xdd, 0x5c, 0x4a, 0x62, 0x35, 0x33, 0xe1, 0x6c, 0x81, 0x3e, 0x81, 0xa6,
	0x6f, 0x39, 0xa4, 0xef, 0xd9, 0xe4, 0x7b, 0x91, 0x64, 0xdd, 0xfc, 0x20, 0x89, 0xd5, 0xf5, 0xdc,
	0xb8, 0xcb, 0x5c, 0x1a, 0x89, 0x96, 0xe2, 0x82, 0x89, 0x0c, 0x9e, 0xa0, 0x43, 0xce, 0xe9, 0x0f,
	0x44, 0xa4, 0x5f, 0x37, 0x37, 0x93, 0x58, 0x45, 0x99, 0xad, 0x14, 0x94, 0xf3, 0x78, 0x4c, 0xc8,
	0x82, 0xe8, 0x94, 0x97, 0xa3, 0x26, 0xca, 0x21, 0x62, 0x32, 0x5b, 0x39, 0x26, 0xb3, 0xa1, 0x27,
	0x50, 0xe3, 0xeb, 0x56, 0x5d, 0xf0, 0x51, 0x12, 0xab, 0x2b, 0x1c, 0x97, 0xb8, 0xc2, 0x8f, 0x3e,
	0x84, 0xaa, 0x4f, 0xed, 0x56, 0x43, 0xd0, 0xd6, 0x92, 0x58, 0xbd, 0xeb, 0x53, 0xbb, 0xc4, 0xe2,
	0x5e, 0xb4, 0x0b, 0x8d, 0x4b, 0x4a, 0x46, 0x76, 0xd8, 0x5a, 0x14, 0xbc, 0x8d, 0x24, 0x56, 0x57,
	0x53, 0x4b, 0x89, 0x2a, 0x39, 0xda, 0xef, 0x8b, 0xb0, 0x5a, 0xae, 0xac, 0xe8, 0xb7, 0x0d, 0xcb,
	0x43, 0x39, 0x04, 0x7d, 0xef, 0x92, 0x89, 0xd2, 0x2e, 0x19, 0xba, 0x3e, 0x73, 0x87, 0xf4, 0xd9,
	0x40, 0xbd, 0x57, 0x8a, 0x32, 0x57, 0x93, 0x58, 0x9d, 0xd2, 0xc1, 0x53, 0x88, 0xb7, 0x7f, 0xc8,
	0x5c, 0x97, 0x78, 0x51, 0x28, 0x7b, 0x22, 0xda, 0x9f, 0xd9, 0x70, 0xbe, 0x42, 0x23, 0x58, 0xe1,
	0x6b, 0x1a, 0x86, 0x94, 0x79, 0x22, 0xa3, 0xaa, 0xc8, 0xe8, 0xe3, 0x5b, 0x64, 0x34, 0x15, 0x97,
	0xd6, 0x76, 0x5a, 0x0b, 0xcf, 0x60, 0x74, 0x02, 0x30, 0x64, 0x63, 0x5f, 0xee, 0x54, 0x13, 0x3b,
	0xed, 0xde, 0x66, 0xa7, 0x2c, 0x06, 0x97, 0xe2, 0xdb, 0x7f, 0x2b, 0xb0, 0x5c, 0x2e, 0x0b, 0xbf,
	0x2b, 0x3d, 0x6a, 0xef, 0xcb, 0x79, 0x15, 0x77, 0x65, 0x48, 0xed, 0x7d, 0x2c, 0xac, 0xbc, 0x28,
	0xfc, 0xff, 0x69, 0x71, 0x9b, 0xd2, 0xa2, 0x48, 0x1b, 0xce, 0xbd, 0x52, 0xc7, 0x90, 0x83, 0x99,
	0xe9, 0x18, 0x42, 0xc7, 0x90, 0x3a, 0x46, 0x69, 0x0c, 0x33, 0x1d, 0x23, 0xd7, 0x31, 0x4a, 0x3a,
	0x5d, 0x31, 0x7c, 0x85, 0x4e, 0x57, 0xe8, 0x74, 0xa5, 0x4e, 0x57, 0xe8, 0x34, 0xa6, 0x74, 0xba,
	0xb9, 0x8e, 0x58, 0xb5, 0x7f, 0xad, 0xc0, 0xca, 0x74, 0xb5, 0x91, 0xce, 0x2b, 0x99, 0x59, 0xc4,
	0x81, 0x2b, 0xe6, 0x4a, 0x12, 0xab, 0x25, 0x2b, 0x2e, 0xad, 0xd1, 0xe7, 0x70, 0xaf, 0x40, 0xe7,
	0x2f, 0xad, 0x20, 0xad, 0x41, 0xc5, 0x5c, 0x4f, 0x62, 0x75, 0xd6, 0x85, 0x67, 0x0d, 0xe8, 0x39,
	0xac, 0xa6, 0x85, 0x2f, 0xd2, 0x10, 0xd5, 0xa9, 0x98, 0x9d, 0x24, 0x56, 0xdb, 0xb3, 0xbe, 0xd2,
	0x6d, 0x98, 0x8b, 0x43, 0xe7, 0xb0, 0xee, 0x8f, 0xc6, 0x61, 0x6f, 0x26, 0x9d, 0x9a, 0x90, 0x7b,
	0x94, 0xc4, 0xea, 0xc3, 0x1b, 0xdc, 0x25, 0xc5, 0x9b, 0xa2, 0xdb, 0x7d, 0x80, 0x62, 0x4a, 0xd0,
	0x67, 0xd9, 0x9c, 0x9d, 0xd0, 0x30, 0x6a, 0x29, 0xdb, 0xd5, 0x9d, 0x25, 0xe3, 0xc1, 0xdc, 0x9c,
	0xf5, 0x72, 0x0a, 0x2e, 0xd1, 0xb5, 0xe5, 0x4c, 0x4a, 0xa0, 0xaf, 0xe0, 0xfe, 0xdc, 0xab, 0xcd,
	0x1d, 0xe8, 0x53, 0xa8, 0xd9, 0x56, 0x64, 0x49, 0x75, 0x6d, 0x5e, 0x7d, 0x36, 0x0a, 0x0b, 0xbe,
	0x66, 0x02, 0x7c, 0x49, 0x6c, 0x6a, 0xf5, 0x0f, 0xf8, 0x2b, 0xbb, 0x09, 0x8d, 0x4b, 0xeb, 0x3b,
	0xd2, 0x3f, 0x10, 0x3d, 0x6c, 0x62, 0x89, 0xd0, 0x16, 0x34, 0x23, 0xea, 0x92, 0x30, 0xb2, 0x5c,
	0x3f, 0xfd, 0xd5, 0xc1, 0x85, 0x41, 0xfb, 0x08, 0x96, 0x72, 0x8d, 0xd0, 0x47, 0x2d, 0x58, 0x94,
	0x50, 0xaa, 0x64, 0x50, 0x3b, 0x80, 0xd5, 0x63, 0x32, 0xe9, 0x31, 0xef, 0x8a, 0x04, 0xd1, 0x31,
	0x11, 0x0f, 0x7b, 0x0b, 0x16, 0x0f, 0x03, 0xe6, 0x1e, 0x93, 0x49, 0xc6, 0x96, 0x90, 0x27, 0xf3,
	0x22, 0x24, 0x41, 0xff, 0x20, 0xbd, 0x1f, 0x58, 0x22, 0xed, 0x47, 0x05, 0xd6, 0x66, 0x64, 0x42,
	0x1f, 0x6d, 0x40, 0xfd, 0x82, 0x15, 0x2a, 0x29, 0xe0, 0xd6, 0xb3, 0x80, 0x0e, 0xe5, 0x15, 0xc3,
	0x29, 0xe0, 0xca, 0x98, 0x0c, 0xac, 0x28, 0x7d, 0xec, 0x9b, 0x58, 0x22, 0xa1, 0x41, 0xa3, 0x91,
	0xbc, 0x48, 0x38, 0x05, 0x9c, 0x7d, 0x46, 0x87, 0x2f, 0xf0, 0x49, 0xfa, 0x6c, 0x63, 0x89, 0xb4,
	0x5d, 0xd8, 0x10, 0x04, 0x99, 0xc8, 0x85, 0x29, 0x4f, 0x94, 0xab, 0x28, 0x25, 0x15, 0xed, 0x29,
	0xdc, 0xbf, 0x81, 0x2d, 0x13, 0x37, 0xcb, 0x89, 0x73, 0x60, 0xfc, 0xa4, 0x00, 0x1c, 0xd2, 0x11,
	0x39, 0x9f, 0x84, 0x11, 0x71, 0x79, 0x7b, 0xcf, 0xa8, 0xe7, 0xa0, 0x4d, 0x3d, 0xfd, 0x02, 0xd1,
	0xb3, 0xcf, 0x13, 0xfd, 0x0b, 0x3e, 0x85, 0xed, 0xf7, 0xd8, 0xd1, 0x51, 0xde, 0xde, 0x23, 0x12,
	0xa1, 0xf9, 0xa1, 0x2b, 0x7a, 0xdf, 0xde, 0x7a, 0xbf, 0x33, 0xf4, 0x8d, 0x7f, 0x14, 0xa8, 0x5e,
	0x98, 0xc7, 0xff, 0x3b, 0x91, 0x01, 0xac, 0xcd, 0x1d, 0x1f, 0x3d, 0x9e, 0xdb, 0xf2, 0xa6, 0x82,
	0xb6, 0x9f, 0xdc, 0x86, 0x16, 0xfa, 0xe8, 0x1b, 0xb8, 0x3b, 0x35, 0x17, 0xe8, 0xd1, 0x5c, 0xe0,
	0xec, 0xf8, 0xb5, 0xb5, 0xff, 0xa2, 0x84, 0xbe, 0xf9, 0xf0, 0xf5, 0xdb, 0xce, 0xc2, 0x9b, 0xb7,
	0x9d, 0x85, 0xd7, 0xd7, 0x1d, 0xe5, 0xcd, 0x75, 0x47, 0xf9, 0xf3, 0xba, 0xa3, 0xfc, 0xf2, 0x57,
	0x67, 0xe1, 0xdb, 0xaa, 0xe5, 0xd3, 0x41, 0x43, 0x1c, 0xb5, 0xfb, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x41, 0x5c, 0x98, 0x11, 0x85, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileSystemClient is the client API for FileSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileSystemClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	//  rpc CategoryGoodsGet(CategoryGoodsGetReq)returns(CategoryGoodsRespList){
	//    option (google.api.http) = {
	//      get: "/kratos-demo/categoryGoodsGet"
	//    };
	//  };
	MediaIDGet(ctx context.Context, in *MediaIDReq, opts ...grpc.CallOption) (*MediaIDResp, error)
}

type fileSystemClient struct {
	cc *grpc.ClientConn
}

func NewFileSystemClient(cc *grpc.ClientConn) FileSystemClient {
	return &fileSystemClient{cc}
}

func (c *fileSystemClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/demo.service.v1.FileSystem/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) MediaIDGet(ctx context.Context, in *MediaIDReq, opts ...grpc.CallOption) (*MediaIDResp, error) {
	out := new(MediaIDResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.FileSystem/MediaIDGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSystemServer is the server API for FileSystem service.
type FileSystemServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	//  rpc CategoryGoodsGet(CategoryGoodsGetReq)returns(CategoryGoodsRespList){
	//    option (google.api.http) = {
	//      get: "/kratos-demo/categoryGoodsGet"
	//    };
	//  };
	MediaIDGet(context.Context, *MediaIDReq) (*MediaIDResp, error)
}

// UnimplementedFileSystemServer can be embedded to have forward compatible implementations.
type UnimplementedFileSystemServer struct {
}

func (*UnimplementedFileSystemServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedFileSystemServer) MediaIDGet(ctx context.Context, req *MediaIDReq) (*MediaIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaIDGet not implemented")
}

func RegisterFileSystemServer(s *grpc.Server, srv FileSystemServer) {
	s.RegisterService(&_FileSystem_serviceDesc, srv)
}

func _FileSystem_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.FileSystem/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_MediaIDGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).MediaIDGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.FileSystem/MediaIDGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).MediaIDGet(ctx, req.(*MediaIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileSystem_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.service.v1.FileSystem",
	HandlerType: (*FileSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _FileSystem_Ping_Handler,
		},
		{
			MethodName: "MediaIDGet",
			Handler:    _FileSystem_MediaIDGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// TBKClient is the client API for TBK service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TBKClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	TitleConvertTBKey(ctx context.Context, in *TitleConvertTBKeyReq, opts ...grpc.CallOption) (*TitleConvertTBKeyResp, error)
	KeyConvertKey(ctx context.Context, in *KeyConvertKeyReq, opts ...grpc.CallOption) (*KeyConvertKeyResp, error)
}

type tBKClient struct {
	cc *grpc.ClientConn
}

func NewTBKClient(cc *grpc.ClientConn) TBKClient {
	return &tBKClient{cc}
}

func (c *tBKClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/demo.service.v1.TBK/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBKClient) TitleConvertTBKey(ctx context.Context, in *TitleConvertTBKeyReq, opts ...grpc.CallOption) (*TitleConvertTBKeyResp, error) {
	out := new(TitleConvertTBKeyResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.TBK/TitleConvertTBKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tBKClient) KeyConvertKey(ctx context.Context, in *KeyConvertKeyReq, opts ...grpc.CallOption) (*KeyConvertKeyResp, error) {
	out := new(KeyConvertKeyResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.TBK/KeyConvertKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TBKServer is the server API for TBK service.
type TBKServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	TitleConvertTBKey(context.Context, *TitleConvertTBKeyReq) (*TitleConvertTBKeyResp, error)
	KeyConvertKey(context.Context, *KeyConvertKeyReq) (*KeyConvertKeyResp, error)
}

// UnimplementedTBKServer can be embedded to have forward compatible implementations.
type UnimplementedTBKServer struct {
}

func (*UnimplementedTBKServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedTBKServer) TitleConvertTBKey(ctx context.Context, req *TitleConvertTBKeyReq) (*TitleConvertTBKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TitleConvertTBKey not implemented")
}
func (*UnimplementedTBKServer) KeyConvertKey(ctx context.Context, req *KeyConvertKeyReq) (*KeyConvertKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyConvertKey not implemented")
}

func RegisterTBKServer(s *grpc.Server, srv TBKServer) {
	s.RegisterService(&_TBK_serviceDesc, srv)
}

func _TBK_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBKServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.TBK/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBKServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBK_TitleConvertTBKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitleConvertTBKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBKServer).TitleConvertTBKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.TBK/TitleConvertTBKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBKServer).TitleConvertTBKey(ctx, req.(*TitleConvertTBKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TBK_KeyConvertKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyConvertKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBKServer).KeyConvertKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.TBK/KeyConvertKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBKServer).KeyConvertKey(ctx, req.(*KeyConvertKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TBK_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.service.v1.TBK",
	HandlerType: (*TBKServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TBK_Ping_Handler,
		},
		{
			MethodName: "TitleConvertTBKey",
			Handler:    _TBK_TitleConvertTBKey_Handler,
		},
		{
			MethodName: "KeyConvertKey",
			Handler:    _TBK_KeyConvertKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *CategoryGoodsGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CategoryGoodsGetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CategoryGoodsGetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Grade != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Grade))
		i--
		dAtA[i] = 0x10
	}
	if m.ParentId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CategoryGoodsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CategoryGoodsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CategoryGoodsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ParentId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Grade != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Grade))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GoodsJingFenQueryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsJingFenQueryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsJingFenQueryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Fields) > 0 {
		i -= len(m.Fields)
		copy(dAtA[i:], m.Fields)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Fields)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Pid) > 0 {
		i -= len(m.Pid)
		copy(dAtA[i:], m.Pid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pid)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Sort) > 0 {
		i -= len(m.Sort)
		copy(dAtA[i:], m.Sort)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SortName) > 0 {
		i -= len(m.SortName)
		copy(dAtA[i:], m.SortName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SortName)))
		i--
		dAtA[i] = 0x22
	}
	if m.PageSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if m.PageIndex != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.EliteId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EliteId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GoodsJingFenResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsJingFenResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsJingFenResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CouponInfo != nil {
		{
			size, err := m.CouponInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CommissionInfo != nil {
		{
			size, err := m.CommissionInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Comments != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Comments))
		i--
		dAtA[i] = 0x10
	}
	if m.CategoryInfo != nil {
		{
			size, err := m.CategoryInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GoodsJingFenResp_CategoryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsJingFenResp_CategoryInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsJingFenResp_CategoryInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cid3Name) > 0 {
		i -= len(m.Cid3Name)
		copy(dAtA[i:], m.Cid3Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cid3Name)))
		i--
		dAtA[i] = 0x32
	}
	if m.Cid3 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid3))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Cid2Name) > 0 {
		i -= len(m.Cid2Name)
		copy(dAtA[i:], m.Cid2Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cid2Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid2 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid2))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Cid1Name) > 0 {
		i -= len(m.Cid1Name)
		copy(dAtA[i:], m.Cid1Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cid1Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cid1 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GoodsJingFenResp_CommissionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsJingFenResp_CommissionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsJingFenResp_CommissionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlusCommissionShare != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PlusCommissionShare))))
		i--
		dAtA[i] = 0x25
	}
	if m.CouponCommission != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CouponCommission))))
		i--
		dAtA[i] = 0x1d
	}
	if m.CommissionShare != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CommissionShare))))
		i--
		dAtA[i] = 0x15
	}
	if m.Commission != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Commission))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *GoodsJingFenResp_CouponInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsJingFenResp_CouponInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsJingFenResp_CouponInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CouponList) > 0 {
		for iNdEx := len(m.CouponList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CouponList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CouponList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CouponList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CouponList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *CategoryGoodsRespList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CategoryGoodsRespList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CategoryGoodsRespList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MediaIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FakeID) > 0 {
		i -= len(m.FakeID)
		copy(dAtA[i:], m.FakeID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FakeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MediaIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MediaID) > 0 {
		i -= len(m.MediaID)
		copy(dAtA[i:], m.MediaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MediaID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyConvertKeyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyConvertKeyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyConvertKeyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromKey) > 0 {
		i -= len(m.FromKey)
		copy(dAtA[i:], m.FromKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FromKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyConvertKeyResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyConvertKeyResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyConvertKeyResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PicURL) > 0 {
		i -= len(m.PicURL)
		copy(dAtA[i:], m.PicURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PicURL)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Rebate) > 0 {
		i -= len(m.Rebate)
		copy(dAtA[i:], m.Rebate)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rebate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ToKey) > 0 {
		i -= len(m.ToKey)
		copy(dAtA[i:], m.ToKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ToKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TitleConvertTBKeyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleConvertTBKeyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TitleConvertTBKeyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TitleConvertTBKeyResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleConvertTBKeyResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TitleConvertTBKeyResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TBKey) > 0 {
		i -= len(m.TBKey)
		copy(dAtA[i:], m.TBKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TBKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CategoryGoodsGetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentId != 0 {
		n += 1 + sovApi(uint64(m.ParentId))
	}
	if m.Grade != 0 {
		n += 1 + sovApi(uint64(m.Grade))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CategoryGoodsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Grade != 0 {
		n += 1 + sovApi(uint64(m.Grade))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.ParentId != 0 {
		n += 1 + sovApi(uint64(m.ParentId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsJingFenQueryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EliteId != 0 {
		n += 1 + sovApi(uint64(m.EliteId))
	}
	if m.PageIndex != 0 {
		n += 1 + sovApi(uint64(m.PageIndex))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	l = len(m.SortName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sort)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Pid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsJingFenResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CategoryInfo != nil {
		l = m.CategoryInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Comments != 0 {
		n += 1 + sovApi(uint64(m.Comments))
	}
	if m.CommissionInfo != nil {
		l = m.CommissionInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CouponInfo != nil {
		l = m.CouponInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsJingFenResp_CategoryInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid1 != 0 {
		n += 1 + sovApi(uint64(m.Cid1))
	}
	l = len(m.Cid1Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Cid2 != 0 {
		n += 1 + sovApi(uint64(m.Cid2))
	}
	l = len(m.Cid2Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Cid3 != 0 {
		n += 1 + sovApi(uint64(m.Cid3))
	}
	l = len(m.Cid3Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsJingFenResp_CommissionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Commission != 0 {
		n += 5
	}
	if m.CommissionShare != 0 {
		n += 5
	}
	if m.CouponCommission != 0 {
		n += 5
	}
	if m.PlusCommissionShare != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsJingFenResp_CouponInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CouponList) > 0 {
		for _, e := range m.CouponList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CouponList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CategoryGoodsRespList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FakeID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovApi(uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MediaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyConvertKeyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyConvertKeyResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ToKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Rebate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PicURL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TitleConvertTBKeyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TitleConvertTBKeyResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TBKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CategoryGoodsGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CategoryGoodsGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CategoryGoodsGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			m.Grade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grade |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CategoryGoodsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CategoryGoodsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CategoryGoodsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			m.Grade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grade |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsJingFenQueryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: goodsJingFenQueryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: goodsJingFenQueryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EliteId", wireType)
			}
			m.EliteId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EliteId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageIndex", wireType)
			}
			m.PageIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsJingFenResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: goodsJingFenResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: goodsJingFenResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CategoryInfo == nil {
				m.CategoryInfo = &GoodsJingFenResp_CategoryInfo{}
			}
			if err := m.CategoryInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			m.Comments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Comments |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommissionInfo == nil {
				m.CommissionInfo = &GoodsJingFenResp_CommissionInfo{}
			}
			if err := m.CommissionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CouponInfo == nil {
				m.CouponInfo = &GoodsJingFenResp_CouponInfo{}
			}
			if err := m.CouponInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsJingFenResp_CategoryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CategoryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CategoryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid1", wireType)
			}
			m.Cid1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid1Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid1Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid2", wireType)
			}
			m.Cid2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid3", wireType)
			}
			m.Cid3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid3 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid3Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid3Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsJingFenResp_CommissionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommissionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommissionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Commission = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionShare", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CommissionShare = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponCommission", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CouponCommission = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlusCommissionShare", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PlusCommissionShare = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsJingFenResp_CouponInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CouponInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CouponInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponList = append(m.CouponList, &CouponList{})
			if err := m.CouponList[len(m.CouponList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CouponList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CouponList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CouponList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CategoryGoodsRespList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CategoryGoodsRespList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CategoryGoodsRespList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &CategoryGoodsResp{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FakeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FakeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyConvertKeyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyConvertKeyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyConvertKeyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyConvertKeyResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyConvertKeyResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyConvertKeyResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rebate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rebate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PicURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleConvertTBKeyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleConvertTBKeyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleConvertTBKeyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleConvertTBKeyResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleConvertTBKeyResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleConvertTBKeyResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TBKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TBKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
